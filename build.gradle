plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '2.0.0'
}

group = "io.github.rkumar0206"
version = "0.0.2"

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24) // use JDK 24
    }

    // ensure the generated bytecode is Java 21 compatible
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    lombokVersion = '1.18.38'
}

dependencies {
    //implementation "com.github.javaparser:javaparser-core:3.26.1"  // AST parsing
    implementation 'dev.langchain4j:langchain4j-google-ai-gemini:1.3.0'
    implementation("org.yaml:snakeyaml:2.2")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation libs.junit.jupiter
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

gradlePlugin {
    website = 'https://github.com/rkumar0206/k8-gen-ai-plugin'
    vcsUrl = 'https://github.com/rkumar0206/k8-gen-ai-plugin.git'
    plugins {
        k8Gen {
            id = "io.github.rkumar0206.k8gen"
            implementationClass = "io.github.rkumar0206.k8gen.K8GenAiPluginPlugin"
            displayName = "K8 config generator AI Plugin"
            description = "Automatically generate k8 manifests using AI"
            tags.set(['docker', 'kubernetes', 'docker-compose', 'ai', 'gemini', 'devOps'])
        }
    }
}
// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
